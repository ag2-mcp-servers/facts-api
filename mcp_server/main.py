# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:18:22+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

app = MCPProxy(
    contact={'name': 'Fun Generators', 'url': 'http://fungenerators.com/'},
    description='A full featured Facts API. REST access with json/xml/jsonp result support. On this day birth and death support, random fact, keyword search support etc. Below is the documentation for the Random Facts API calls. You can try them out right here. [Click here to subscribe](http://fungenerators.com/api/facts/)\n',
    termsOfService='https://fungenerators.com/terms',
    title='Facts API',
    version='1.5',
    servers=[{'url': 'https://api.fungenerators.com'}],
)


@app.delete(
    '/fact',
    description=""" Delete a Fact entry identified by the id. """,
    tags=['fact_handling'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def delete_fact(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fact',
    description=""" Get a Fact belonging to the id. """,
    tags=['fact_handling'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_fact(id: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/fact',
    description=""" Add a Fact entry to the database (private collection). """,
    tags=['fact_handling'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def put_fact(fact: str, category: str = ..., subcategory: str = ..., tags: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fact/categories',
    description=""" Get a random Fact. """,
    tags=['random_fact_retrieval'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_fact_categories(start: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fact/fod',
    description=""" Get fact of the day for the given category. """,
    tags=['fact_handling', 'random_fact_retrieval'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_fact_fod(category: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fact/fod/categories',
    description=""" Get the list of supported fact of the day categories. """,
    tags=['fact_handling'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_fact_fod_categories():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fact/numbers',
    description=""" Get a random fact about a number """,
    tags=['fact_handling'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_fact_numbers(number: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fact/onthisday/born',
    description=""" Returns a random ( famous/ relatively famous ) person born on a given day and month """,
    tags=['historical_fact_events'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_fact_onthisday_born(month: Optional[str] = None, day: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fact/onthisday/died',
    description=""" Returns a random ( famous/ relatively famous ) person died on a given day and month """,
    tags=['historical_fact_events'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_fact_onthisday_died(month: Optional[str] = None, day: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fact/onthisday/event',
    description=""" Returns a random ( famous/ relatively famous ) historic event on a given day and month """,
    tags=['historical_fact_events'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_fact_onthisday_event(month: Optional[str] = None, day: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fact/random',
    description=""" Get a random Fact for a given category(optional) and subcategory(optional). """,
    tags=['fact_handling', 'random_fact_retrieval'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_fact_random(category: Optional[str] = None, subcategory: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/fact/search',
    description=""" Search for random Fact which has the text in the query, for a given category(optional) and subcategory(optional). """,
    tags=['fact_handling', 'random_fact_retrieval'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_fact_search(
    query: Optional[str] = None,
    category: Optional[str] = None,
    subcategory: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
